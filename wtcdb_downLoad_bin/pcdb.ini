[SET]
PRJ=5320
LIB=usb

[ALIAS]
0=aio set addrmask c000xxxx
1=rst w c0001c10 02
2=run w c0001c10 80
3=clrmem w 0 0
4=setmem w 0 ffffffff
5=mm mount -i ram.img m:
6=um mount -u m:
7=a32 set addrmask 0
8=rr r -r -s 256
9=acpu w ff08 00
10=areg w ff08 06
11=sysen w 0100 01
12=clkon w 3042 f1
13=eeprom wu 31f8 02;wu 31f1 60;wu 31f0 13;set mmode 01
14=sccb8 wu 31f8 02;wu 31f1 60;wu 31f0 13;set mmode 40
15=sccb  wu 31f8 02;wu 31f1 60;wu 31f0 13;set mmode 41
16=sdp wu 3006 02;wu 301f 08; wu 4118 11;set mmode 03
17=pdp wu 3006 02;wu 301f 08; wu 4118 1f;wu 3007 40;wu 3002 00;wu 3004 ff;set mmode 04
18=spi_erase wu 0d 00; wu 0c 06; wu 0d 01;wu 0d 00; wu 0c c7; wu 0d 01

[MEM]
0=spi:1 42 05;20 00 00;1 0d 00;1 0c 06;1 0d 01;1 0d 00;1 0c 02;b 0c 000102;10 0c 100;1 0d 01;21 00 02;
1=spi:1 42 05;1 0d 01;1 0d 00;1 0c 03;b 0c 000102;1 0c 00;1 0d 0a;20 00 00;11 0c 400;20 00 01;1 0d 01;
2=sram:0a 40 0100;20 00 00;10 44 100;
3=sram:0a 40 0100;20 00 01;11 44 100;
4=otp:1 12 7c;20 00 00;09 10 00;1 11 40;1 13 55;10 13 01;20 00 01;
5=otp:1 12 7c;09 10 00;1 11 00;81 19 00;20 00 01;11 19 400;
6=i2c:1 03 02;09 04 01;09 05 00;1 07 17;21 00 02;20 00 00;10 06 01;1 07 08;21 00 01;20 00 01;1 07 20;
7=i2c:1 03 02;09 04 01;09 05 00;1 07 37;21 00 02;1 07 51;21 00 02;20 00 00;1 07 48;21 00 01;11 06 01;20 00 01;1 07 e8;
8=hspi:1 0a 80;1 09 03;1 09 02;0a 08 0001;01 08 00;20 00 00;10 08 100;20 00 01;1 09 03;
9=hspi:1 0a 80;1 09 03;1 09 02;0a 08 0001;01 08 80;1 09 0a;1 08 00;20 00 00;11 08 100;20 00 01;1 09 03;
10=aspi:1 0a 85;1 09 03;1 09 02;1 08 40;09 08 00;20 00 01;10 08 01;20 00 01;1 09 03;
11=aspi:1 0a 85;1 09 03;1 09 02;1 08 00;1 09 0e;20 00 01;11 08 01;20 00 01;1 09 03;
16=spi_sector_erase:1 0d 00;1 0c 20;b 0c 000102;1 0d 01;
17=spi_block_erase:1 0d 00;1 0c d8;b 0c 000102;1 0d 01;
18=spi:1 42 05;1 0d 01;1 0d 00;1 0c 03;1 0c 00;1 0c 10;1 0c 00;1 0c 00;1 0d 0a;20 00 00;11 0c 400;20 00 01;1 0d 01;
#### cmd adr dat 	==> cmd=01-04, write number of data to addr
#### cmd adr AlAmAnAo 	==> cmd=08-0a, write Ao, An, Am and Al to adr (cmd & 0x7: number of byte to write)
#### 20  00  00		==> section end
#### 21  th  tl		==> wait {th, tl} milliseconds
#### 10  adr num	==> write num of data to adr
#### 11  adr num	==> read num of data from adr 

0c 08 03020100	; 00->A[7:0]; 03->A[31:24]
0c 08 00010203